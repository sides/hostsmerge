#!/usr/bin/env python

import getopt, sys, os, re, socket, time, urllib2, shutil

__version__ = "hostsmerge 0.0.0"
__confpath__ = "hostsmerge.conf"

def read_config(path):
	opts = {}
	if os.path.isfile(path):
		with open(path, "r") as config_file:
			opts = parse_config(config_file.read())
	return opts

def default_paths(opts):
	if not "hosts" in opts:
		hosts_path = ""
		if os.name == "nt":
			hosts_path = os.path.join(os.environ["SYSTEMROOT"], "system32/drivers/etc/hosts")
		elif os.name == "posix":
			hosts_path = "/etc/hosts"
		else:
			raise Exception("No hosts file found (unsupported os: " + os.name + "), specify path manually with --hosts")
		if not os.path.isfile(hosts_path):
			raise Exception("No hosts file found in \"" + hosts_path + "\", specify path manually with --hosts")
		opts["hosts"] = hosts_path
	if not "backup" in opts:
		opts["backup"] = "backup"
	return opts

def parse_config(lines):
	opts = {}
	for line in lines.split("\n"):
		line = re.sub(r"#.*", "", line)
		if len(line.strip()):
			groups = re.match(r"(?!-)([^\s=]+)(?:\s*=\s*(.*))?", line).groups()
			opts[groups[0]] = groups[1] if groups[1] else ""
	return opts

def read_hosts(path):
	print("Reading " + path + "...")
	with open(path, "r") as hosts_file:
		lines = hosts_file.read()
	return parse_hosts(lines)

def write_hosts(path, hosts):
	print("Writing " + path + "...")
	outp = "# Generated by " + __version__ + " on " + time.strftime("%c") + "\n"
	for ip, hostnames in hosts.iteritems():
		for hostname in hostnames:
			outp += ip + "\t" + hostname + "\n"
	with open(path, "w") as hosts_file:
		hosts_file.write(outp.strip())

def get_hosts(url):
	print("Retrieving " + url + "...")
	return parse_hosts(urllib2.urlopen(url).read())

def parse_hosts(lines):
	hosts = {}
	for line in lines.split("\n"):
		line = re.sub(r"#.*", "", line)
		if len(line.strip()):
			match = re.match(r"\s*(\S*)\s*(.*)", line)
			ip = match.group(1)
			hostnames = match.group(2).split()
			if ip in hosts:
				hosts[ip] =  set().union(hosts[ip], hostnames)
			else:
				hosts[ip] = hostnames
	return hosts

def backup_rules(opts):
	if not "no-backup" in opts and (not "output" in opts or opts["hosts"] == opts["output"]):
		if not os.path.exists(opts["backup"]):
			os.makedirs(opts["backup"])
		shutil.copy2(opts["hosts"], os.path.join("backup", os.path.splitext(opts["hosts"])[0] + "_" + time.strftime("%Y%m%d_%H%M%S")))

def merge_rules(opts):
	hosts = read_hosts(opts["hosts"]) if not "new" in opts else {}
	for uri in opts["sources"]:
		if os.path.isfile(uri):
			new_hosts = read_hosts(uri)
		else:
			if not re.match(r"^[a-zA-Z0-9]+:\/\/", uri):
				uri = "http://" + uri
			new_hosts = get_hosts(uri)
		for ip, hostnames in new_hosts.iteritems():
			if ip in hosts:
				hosts[ip] = list(set().union(hosts[ip], hostnames))
			else:
				hosts[ip] = hostnames
			if "sort" in opts:
				hosts[ip] = sorted(hosts[ip])
	backup_rules(opts)
	write_hosts(opts["output"] if "output" in opts else opts["hosts"], hosts)

def get_rules(opts):
	hosts = read_hosts(opts["hosts"])
	for query in opts["queries"]:
		is_ip = True
		found = 0
		if not ":" in query: # ipv6
			try:
				socket.inet_aton(query) # ipv4
			except socket.error:
				is_ip = False
		if is_ip:
			if query in hosts:
				print(" ".join(hosts[query]) + " resolve(s) to " + query)
				found += 1
		else:
			for ip, hostnames in hosts.iteritems():
				if query in hostnames:
					print(query + " resolves to " + ip)
					found += 1
		if not found:
			print(query + " - nothing found")
		elif found > 1 and not is_ip:
			print("Warning: " + query + " resolves to multiple hostnames?")

def set_rules(opts):
	hosts = read_hosts(opts["hosts"])
	raise NotImplementedError("NotImplementedError")

def usage():
	print("Usage:\t" + os.path.basename(sys.argv[0]) + " [options] <url|file>")

def main():
	shorthand = {"h": "help", "v": "version", "s": "set", "g": "get", "b": "no-backup", "n": "new", "o": "sort", "H": "hosts", "B": "backup", "O": "output"}
	try:
		copts, args = getopt.getopt(sys.argv[1:], "hvsgbnoH:B:O:", ["help", "version", "hosts=", "set", "get", "no-backup", "backup=", "new", "sort", "output="])
	except getopt.GetoptError as err:
		print(str(err))
		usage()
		sys.exit(2)

	try:
		opts = read_config(__confpath__)
		for o, a in copts:
			o = o.lstrip("-")
			if o in shorthand:
				o = shorthand[o]
			if o == "help":
				usage()
				return
			elif o == "version":
				print(__version__)
				return
			else:
				opts[o] = a
		opts = default_paths(opts)

		if "get" in opts:
			opts["queries"] = args
			get_rules(opts)
		elif "set" in opts:
			opts["queries"] = args
			set_rules(opts)
		else:
			opts["sources"] = args
			merge_rules(opts)
	except Exception as err:
		print("Failed: " + str(err))
		sys.exit(1)

	print("Success!")

if __name__ == "__main__":
	main()